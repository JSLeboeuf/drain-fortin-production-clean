name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans every day at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - secrets
          - dependencies
          - container
          - sast

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name != 'schedule' }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # SECRETS SCANNING
  # ==========================================
  secrets-scan:
    name: 'Secrets Scanning'
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'secrets' || inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Scan for hardcoded secrets in config
        run: |
          echo "🔍 Scanning configuration files for potential secrets..."
          
          # Check for common secret patterns in config files
          find . -name "*.json" -o -name "*.yml" -o -name "*.yaml" -o -name "*.env*" | \
          grep -v node_modules | \
          xargs grep -l -i -E "(password|secret|key|token|api_key)" | \
          while read file; do
            echo "⚠️ Found potential secrets in: $file"
            grep -n -i -E "(password|secret|key|token|api_key)" "$file" || true
          done

  # ==========================================
  # DEPENDENCY SCANNING
  # ==========================================
  dependency-scan:
    name: 'Dependency Vulnerability Scan'
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'dependencies' || inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch' }}
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Deno (Backend)
        if: matrix.component == 'backend'
        uses: denoland/setup-deno@v1
        with:
          deno-version: '1.46'

      - name: Install dependencies (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci --prefer-offline

      - name: Run npm audit (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npx audit-ci --moderate --report-type json --output-format json

      - name: Run Snyk (Frontend)
        if: matrix.component == 'frontend'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json

      - name: Deno dependency audit (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          echo "🔍 Scanning Deno dependencies for known vulnerabilities..."
          
          # Extract all import URLs from TypeScript files
          find supabase/functions -name "*.ts" -exec grep -h "import.*from.*https://" {} \; | \
          sed -n 's/.*from.*"\(https:\/\/[^"]*\)".*/\1/p' | \
          sort -u > deno_deps.txt
          
          if [ -s deno_deps.txt ]; then
            echo "Found $(wc -l < deno_deps.txt) external dependencies:"
            cat deno_deps.txt
            
            # Check against known vulnerable packages (basic implementation)
            while read -r dep; do
              echo "Checking: $dep"
              # This would be enhanced with actual vulnerability database
            done < deno_deps.txt
          else
            echo "No external dependencies found"
          fi

      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports-${{ matrix.component }}
          path: |
            frontend/npm-audit-report.json
            backend/deno_deps.txt
            .snyk

  # ==========================================
  # STATIC APPLICATION SECURITY TESTING
  # ==========================================
  sast-scan:
    name: 'SAST Security Scan'
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'sast' || inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/react
            p/nodejs
          generateSarif: "1"

      - name: Upload Semgrep results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Run ESLint Security Plugin (Frontend)
        run: |
          cd frontend
          npm ci --prefer-offline
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-security-report.json || true

      - name: Custom security patterns scan
        run: |
          echo "🔍 Scanning for custom security patterns..."
          
          # Check for dangerous patterns
          echo "Checking for dangerous patterns..."
          grep -r -n -E "(eval|dangerouslySetInnerHTML|innerHTML)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . || true
          
          # Check for HTTP URLs in production code
          echo "Checking for HTTP URLs that should be HTTPS..."
          grep -r -n "http://" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || true
          
          # Check for console logs that might leak sensitive data
          echo "Checking for console statements..."
          grep -r -n "console\." --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || true

  # ==========================================
  # CONTAINER SECURITY SCANNING
  # ==========================================
  container-scan:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'container' || inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: security-scan:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan with Snyk
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: security-scan:latest
          args: --severity-threshold=high --file=Dockerfile

      - name: Run container structure test
        run: |
          # Download container structure test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          
          # Create basic structure test config if not exists
          if [ ! -f .github/container-structure-test.yaml ]; then
            cat > .github/container-structure-test.yaml << EOF
          schemaVersion: 2.0.0
          commandTests:
            - name: "Check if app starts"
              command: ["node", "--version"]
              expectedOutput: ["v20.*"]
          fileExistenceTests:
            - name: "Application directory"
              path: "/app"
              shouldExist: true
            - name: "Non-root user"
              path: "/etc/passwd"
              shouldExist: true
              expectedContents: ["drainfortin.*"]
          metadataTest:
            exposedPorts: ["3000"]
            cmd: ["serve", "-s", "frontend/dist", "-l", "3000"]
          EOF
          fi
          
          ./container-structure-test-linux-amd64 test --image security-scan:latest --config .github/container-structure-test.yaml

  # ==========================================
  # INFRASTRUCTURE SECURITY SCAN
  # ==========================================
  infrastructure-scan:
    name: 'Infrastructure Security Scan'
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_type == 'full' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan Docker Compose configuration
        run: |
          echo "🔍 Scanning Docker Compose for security issues..."
          
          # Check for security issues in docker-compose.yml
          if [ -f docker-compose.yml ]; then
            echo "Checking for privileged containers..."
            grep -n "privileged.*true" docker-compose.yml || echo "✅ No privileged containers found"
            
            echo "Checking for host network mode..."
            grep -n "network_mode.*host" docker-compose.yml || echo "✅ No host network mode found"
            
            echo "Checking for volume mounts..."
            grep -n "/var/run/docker.sock" docker-compose.yml && echo "⚠️ Docker socket mounted" || echo "✅ Docker socket not mounted"
          fi

      - name: Scan Dockerfile for best practices
        run: |
          echo "🔍 Scanning Dockerfile for security best practices..."
          
          if [ -f Dockerfile ]; then
            echo "Checking for non-root user..."
            grep -n "USER " Dockerfile || echo "⚠️ No USER instruction found - running as root"
            
            echo "Checking for COPY/ADD with proper ownership..."
            grep -n "COPY.*--chown" Dockerfile || echo "⚠️ Consider using --chown flag with COPY"
            
            echo "Checking for health checks..."
            grep -n "HEALTHCHECK" Dockerfile || echo "⚠️ No health check defined"
          fi

  # ==========================================
  # SECURITY SUMMARY REPORT
  # ==========================================
  security-summary:
    name: 'Security Summary Report'
    runs-on: ubuntu-latest
    needs: [secrets-scan, dependency-scan, sast-scan, container-scan, infrastructure-scan]
    if: always()
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# 🔒 Security Scan Summary Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date**: $(date -u)" >> security-report.md
          echo "**Repository**: ${{ github.repository }}" >> security-report.md
          echo "**Commit**: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📊 Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Component | Status |" >> security-report.md
          echo "|-----------|--------|" >> security-report.md
          echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Pass' || needs.secrets-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Pass' || needs.dependency-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> security-report.md
          echo "| SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ Pass' || needs.sast-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Pass' || needs.container-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> security-report.md
          echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result == 'success' && '✅ Pass' || needs.infrastructure-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Fail' }} |" >> security-report.md
          echo "" >> security-report.md
          
          # Add recommendations based on results
          echo "## 🛡️ Security Recommendations" >> security-report.md
          echo "" >> security-report.md
          
          if [ "${{ needs.secrets-scan.result }}" = "failure" ]; then
            echo "- 🚨 **Critical**: Address secrets detected in repository" >> security-report.md
          fi
          
          if [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
            echo "- ⚠️ **High**: Update vulnerable dependencies" >> security-report.md
          fi
          
          if [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "- 🔐 **Medium**: Resolve container security issues" >> security-report.md
          fi
          
          echo "- 📋 Regular security scans scheduled daily at 3 AM UTC" >> security-report.md
          echo "- 🔄 Enable branch protection rules for main/develop branches" >> security-report.md
          echo "- 🚀 Consider implementing security headers in production" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Notify security team on failure
        if: failure() && github.event_name == 'schedule'
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{
              "text": "🚨 Security Scan Alert",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Security vulnerabilities detected in Drain Fortin Production* 🚨\n• Repository: ${{ github.repository }}\n• Commit: ${{ github.sha }}\n• <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }'

      - name: Create security issue on critical findings
        if: needs.secrets-scan.result == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Issue Detected',
              body: `# Critical Security Alert
              
              **Detected**: ${new Date().toISOString()}
              **Commit**: ${context.sha}
              **Workflow**: ${context.workflow}
              
              ## Issue Details
              Security scan has detected critical issues that require immediate attention:
              
              - Secrets detected in repository
              - Review the security scan results in the workflow logs
              - Take immediate action to rotate any exposed credentials
              
              ## Action Required
              1. Review workflow logs: ${context.server_url}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              2. Identify and rotate any exposed secrets
              3. Remove secrets from git history if necessary
              4. Update security practices
              
              **Priority**: Critical
              **Assignees**: Security team`,
              labels: ['security', 'critical', 'bug']
            });